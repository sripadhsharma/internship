import pandas as pd
import requests
from datetime import datetime, timedelta
from sqlalchemy import create_engine

# Function to fetch hourly weather data from Open-Meteo.com
def fetch_hourly_weather_data(latitude, longitude, days=2):
    # Calculate start and end dates for historical data
    end_date = datetime.now().date() - timedelta(days=3-days)
    start_date = end_date - timedelta(days=days)
#     end_date = datetime.now().date()  - timedelta(days=days-3)
#     start_date = end_date - timedelta(days=days-1)
    # Fetch hourly data
    hourly_df = fetch_weather_data(latitude, longitude, start_date, end_date)

    return hourly_df

# Function to fetch weather data from Open-Meteo.com
def fetch_weather_data(latitude, longitude, start_date, end_date):
    # API parameters
    url = "https://archive-api.open-meteo.com/v1/archive"
    params = {
        "latitude": latitude,
        "longitude": longitude,
        "start_date": start_date,
        "end_date": end_date,
        "resolution": "hourly",
        "hourly": ["temperature_2m", "relative_humidity_2m", "dew_point_2m", 
                   "apparent_temperature", "precipitation", "rain", "snowfall", 
                   "snow_depth", "weather_code", "pressure_msl", "surface_pressure", 
                   "cloud_cover", "cloud_cover_low", "cloud_cover_mid", 
                   "cloud_cover_high", "et0_fao_evapotranspiration", 
                   "vapour_pressure_deficit", "wind_speed_10m", "wind_speed_100m", 
                   "wind_direction_10m", "wind_direction_100m", "wind_gusts_10m", 
                   "soil_temperature_0_to_7cm", "soil_temperature_7_to_28cm", 
                   "soil_temperature_28_to_100cm", "soil_temperature_100_to_255cm", 
                   "soil_moisture_0_to_7cm", "soil_moisture_7_to_28cm", 
                   "soil_moisture_28_to_100cm", "soil_moisture_100_to_255cm"],
        "timezone": "auto"
    }

    # Make API request
    response = requests.get(url, params=params)

    # Check if the request was successful
    if response.status_code == 200:
        # Parse JSON response
        data = response.json()

        # Extract only the hourly data
        hourly_data = data['hourly']

        # Convert hourly data into DataFrame
        df = pd.DataFrame(hourly_data)
        print(df)

        # Convert 'time' column to datetime format
        df['time'] = pd.to_datetime(df['time'])

        print("Hourly weather data fetched successfully.")
        return df
    else:
        print("Failed to fetch hourly weather data. Status code:", response.status_code)
        return None

# Function to load DataFrame into PostgreSQL, avoiding duplicates
def load_data_into_postgresql(df):
    if df is not None:
        # Connect to PostgreSQL database
        engine = create_engine('postgresql://postgres:Postgres@localhost/postgres')

        # Load DataFrame into PostgreSQL only if it contains new data
        with engine.connect() as connection:
            # Query to check if data already exists in the database
            query = f"SELECT MAX(\"time\") FROM public.\"Hourly123\""
#              query = f"SELECT MAX(\"time\") FROM public.\"History_data\""
            max_last_updated_pg = pd.read_sql(query, connection)
            print(max_last_updated_pg)

            # Extract the maximum timestamp value from the DataFrame
            max_last_updated_pg_value = max_last_updated_pg.iloc[0, 0]

            # Filter the DataFrame to include only new records
            if max_last_updated_pg_value is not None:
                df = df[df['time'] > max_last_updated_pg_value]

            # Load the filtered DataFrame into PostgreSQL
            if not df.empty:
                df.to_sql('Hourly123', con=connection, if_exists='append', index=False)
                print("Hourly weather data loaded into PostgreSQL database")
            else:
                print("No new data to load into PostgreSQL")
    else:
        print("No data to load into PostgreSQL")

# Example usage
latitude = 17.384
longitude = 78.4564

# Fetch hourly weather data and store it into a DataFrame
hourly_weather_df = fetch_hourly_weather_data(latitude, longitude)

# Load DataFrame into PostgreSQL
load_data_into_postgresql(hourly_weather_df)
                time  temperature_2m  relative_humidity_2m  dew_point_2m  \
0   2024-05-03T00:00            27.1                  29.0           7.6   
1   2024-05-03T01:00            28.3                  29.0           8.5   
2   2024-05-03T02:00            25.4                  37.0           9.8   
3   2024-05-03T03:00            25.4                  37.0           9.5   
4   2024-05-03T04:00            24.5                  44.0          11.6   
..               ...             ...                   ...           ...   
67  2024-05-05T19:00             NaN                   NaN           NaN   
68  2024-05-05T20:00             NaN                   NaN           NaN   
69  2024-05-05T21:00             NaN                   NaN           NaN   
70  2024-05-05T22:00             NaN                   NaN           NaN   
71  2024-05-05T23:00             NaN                   NaN           NaN   

    apparent_temperature  precipitation  rain  snowfall snow_depth  \
0                   25.4            0.0   0.0       0.0       None   
1                   27.3            0.0   0.0       0.0       None   
2                   23.8            0.0   0.0       0.0       None   
3                   24.5            0.0   0.0       0.0       None   
4                   23.8            0.0   0.0       0.0       None   
..                   ...            ...   ...       ...        ...   
67                   NaN            NaN   NaN       NaN       None   
68                   NaN            NaN   NaN       NaN       None   
69                   NaN            NaN   NaN       NaN       None   
70                   NaN            NaN   NaN       NaN       None   
71                   NaN            NaN   NaN       NaN       None   

    weather_code  ...  wind_direction_100m  wind_gusts_10m  \
0            0.0  ...                325.0            13.3   
1            0.0  ...                351.0            11.2   
2            0.0  ...                 76.0            14.0   
3            0.0  ...                 61.0            12.2   
4            0.0  ...                 60.0            10.1   
..           ...  ...                  ...             ...   
67           NaN  ...                  NaN             NaN   
68           NaN  ...                  NaN             NaN   
69           NaN  ...                  NaN             NaN   
70           NaN  ...                  NaN             NaN   
71           NaN  ...                  NaN             NaN   

    soil_temperature_0_to_7cm  soil_temperature_7_to_28cm  \
0                        31.0                        34.3   
1                        30.1                        34.1   
2                        29.4                        33.8   
3                        28.6                        33.6   
4                        28.0                        33.3   
..                        ...                         ...   
67                        NaN                         NaN   
68                        NaN                         NaN   
69                        NaN                         NaN   
70                        NaN                         NaN   
71                        NaN                         NaN   

    soil_temperature_28_to_100cm  soil_temperature_100_to_255cm  \
0                           31.7                           28.5   
1                           31.7                           28.5   
2                           31.7                           28.5   
3                           31.7                           28.5   
4                           31.7                           28.5   
..                           ...                            ...   
67                           NaN                            NaN   
68                           NaN                            NaN   
69                           NaN                            NaN   
70                           NaN                            NaN   
71                           NaN                            NaN   

    soil_moisture_0_to_7cm  soil_moisture_7_to_28cm  \
0                     0.12                    0.158   
1                     0.12                    0.158   
2                     0.12                    0.158   
3                     0.12                    0.158   
4                     0.12                    0.158   
..                     ...                      ...   
67                     NaN                      NaN   
68                     NaN                      NaN   
69                     NaN                      NaN   
70                     NaN                      NaN   
71                     NaN                      NaN   

    soil_moisture_28_to_100cm  soil_moisture_100_to_255cm  
0                       0.222                       0.253  
1                       0.222                       0.253  
2                       0.222                       0.253  
3                       0.222                       0.253  
4                       0.222                       0.253  
..                        ...                         ...  
67                        NaN                         NaN  
68                        NaN                         NaN  
69                        NaN                         NaN  
70                        NaN                         NaN  
71                        NaN                         NaN  

[72 rows x 31 columns]
Hourly weather data fetched successfully.
                  max
0 2024-05-04 23:00:00
Hourly weather data loaded into PostgreSQL database
import pandas as pd
import requests
from datetime import datetime, timedelta
from sqlalchemy import create_engine

# Function to fetch hourly weather data from Open-Meteo.com
def fetch_hourly_weather_data(latitude, longitude, days=2):
    # Calculate start and end dates for historical data
    end_date = datetime.now().date()  - timedelta(days=5-days)
    start_date = end_date - timedelta(days=days)
#     end_date = datetime.now().date()  - timedelta(days=days-3)
#     start_date = end_date - timedelta(days=days-1)
    # Fetch hourly data
    hourly_df = fetch_weather_data(latitude, longitude, start_date, end_date)

    return hourly_df

# Function to fetch weather data from Open-Meteo.com
def fetch_weather_data(latitude, longitude, start_date, end_date):
    # API parameters
    url = "https://archive-api.open-meteo.com/v1/archive"
    params = {
        "latitude": latitude,
        "longitude": longitude,
        "start_date": start_date,
        "end_date": end_date,
        "resolution": "hourly",
        "hourly": ["temperature_2m", "relative_humidity_2m", "dew_point_2m", 
                   "apparent_temperature", "precipitation", "rain", "snowfall", 
                   "snow_depth", "weather_code", "pressure_msl", "surface_pressure", 
                   "cloud_cover", "cloud_cover_low", "cloud_cover_mid", 
                   "cloud_cover_high", "et0_fao_evapotranspiration", 
                   "vapour_pressure_deficit", "wind_speed_10m", "wind_speed_100m", 
                   "wind_direction_10m", "wind_direction_100m", "wind_gusts_10m", 
                   "soil_temperature_0_to_7cm", "soil_temperature_7_to_28cm", 
                   "soil_temperature_28_to_100cm", "soil_temperature_100_to_255cm", 
                   "soil_moisture_0_to_7cm", "soil_moisture_7_to_28cm", 
                   "soil_moisture_28_to_100cm", "soil_moisture_100_to_255cm"],
        "timezone": "auto"
    }

    # Make API request
    response = requests.get(url, params=params)

    # Check if the request was successful
    if response.status_code == 200:
        # Parse JSON response
        data = response.json()

        # Extract only the hourly data
        hourly_data = data['hourly']

        # Convert hourly data into DataFrame
        df = pd.DataFrame(hourly_data)

        # Convert 'time' column to datetime format
        df['time'] = pd.to_datetime(df['time'])

        print("Hourly weather data fetched successfully.")
        return df
    else:
        print("Failed to fetch hourly weather data. Status code:", response.status_code)
        return None

# # Function to load DataFrame into PostgreSQL, avoiding duplicates
# def load_data_into_postgresql(df):
#     if df is not None:
#         # Connect to PostgreSQL database
#         engine = create_engine('postgresql://postgres:Postgres@localhost/postgres')

#         # Load DataFrame into PostgreSQL only if it contains new data
#         with engine.connect() as connection:
#             # Query to check if data already exists in the database
#             query = "SELECT MAX(\"time\") FROM hourly_weather_data"
#             max_last_updated_pg = pd.read_sql(query, connection)
#             print(max_last_updated_pg)

#             # Extract the maximum timestamp value from the DataFrame
#             max_last_updated_pg_value = max_last_updated_pg.iloc[0, 0]

#             # Filter the DataFrame to include only new records
#             if max_last_updated_pg_value is not None:
#                 df = df[df['time'] > max_last_updated_pg_value]

#             # Load the filtered DataFrame into PostgreSQL
#             if not df.empty:
#                 df.to_sql('hourly_weather_data', con=connection, if_exists='append', index=False)
#                 print("Hourly weather data loaded into PostgreSQL database")
#             else:
#                 print("No new data to load into PostgreSQL")
#     else:
#         print("No data to load into PostgreSQL")
engine = create_engine('postgresql://postgres:Postgres@localhost/postgres')
hourly_weather_df.to_sql('Hourly123', engine, if_exists='append', index=False)
max_last_updated_query_pg = 'SELECT MAX("time") FROM public."Hourly123"'
max_last_updated_pg = pd.read_sql(max_last_updated_query_pg, engine)
max_last_updated_pg_value = max_last_updated_pg.iloc[0, 0]  # Extracting the timestamp value
print("Max Postgres database last date value =", max_last_updated_pg_value)
# Example usage
# Example usage
latitude = 17.384
longitude = 78.4564

# Fetch hourly weather data and store it into a DataFrame
hourly_weather_df = fetch_hourly_weather_data(latitude, longitude)

# Load DataFrame into PostgreSQL
# load_data_into_postgresql(hourly_weather_df)
Max Postgres database last date value = 2024-05-03 23:00:00
Hourly weather data fetched successfully.
